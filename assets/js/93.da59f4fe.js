(window.webpackJsonp=window.webpackJsonp||[]).push([[93],{416:function(v,_,t){"use strict";t.r(_);var e=t(4),l=Object(e.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h2",{attrs:{id:"foundry"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#foundry"}},[v._v("#")]),v._v(" Foundry")]),v._v(" "),_("ul",[_("li",[v._v("(官方文档)[https://book.getfoundry.sh/]")]),v._v(" "),_("li",[v._v("(中文文档)[https://learnblockchain.cn/docs/foundry/i18n/zh/index.html]\n")])]),v._v(" "),_("h2",{attrs:{id:"forge"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#forge"}},[v._v("#")]),v._v(" forge")]),v._v(" "),_("ul",[_("li",[v._v("用于编译、测试和部署智能合约")]),v._v(" "),_("li",[_("code",[v._v("forge init hello_foundry")]),v._v(" 初始化项目")]),v._v(" "),_("li",[_("code",[v._v("forge build")]),v._v(" 构建项目")]),v._v(" "),_("li",[_("code",[v._v("forge test")]),v._v(" 运行测试\n"),_("ul",[_("li",[_("code",[v._v("-vv")]),v._v(" 显示日志")]),v._v(" "),_("li",[_("code",[v._v("-vvv")]),v._v(" 显示更详细的日志")]),v._v(" "),_("li",[_("code",[v._v("-vvvv")]),v._v(" 显示跟踪信息")]),v._v(" "),_("li",[_("code",[v._v("--match-test testFunctionName")]),v._v(" 运行指定测试函数")])])]),v._v(" "),_("li",[_("code",[v._v("forge create --rpc-url <your_rpc_url> --private-key <your_private_key> src/MyContract.sol:MyContract")]),v._v(" 部署合约")]),v._v(" "),_("li",[_("code",[v._v("forge fmt")]),v._v(" 格式化代码")]),v._v(" "),_("li",[_("code",[v._v("forge snapshot")]),v._v(" 生成 gas 报告")]),v._v(" "),_("li",[_("code",[v._v("forge coverage")]),v._v(" 生成测试覆盖率报告")])]),v._v(" "),_("h2",{attrs:{id:"cast"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#cast"}},[v._v("#")]),v._v(" Cast")]),v._v(" "),_("ul",[_("li",[v._v("用于发送交易，查询数据，编码和解码数据，与智能合约交互")]),v._v(" "),_("li",[_("code",[v._v("cast send")]),v._v(" 发送交易")]),v._v(" "),_("li",[_("code",[v._v("cast call")]),v._v(" 调用只读函数")]),v._v(" "),_("li",[_("code",[v._v("cast balance")]),v._v(" 查询账户余额")]),v._v(" "),_("li",[_("code",[v._v("cast --to-wei 1eth")]),v._v(" ETH 转换为 Wei")]),v._v(" "),_("li",[_("code",[v._v("cast --from-wei 1000000000000000000")]),v._v(" Wei 转换为 ETH")]),v._v(" "),_("li",[_("code",[v._v('cast sig "transfer(address,uint256)"')]),v._v(" 获取函数签名")])]),v._v(" "),_("h2",{attrs:{id:"anvil"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#anvil"}},[v._v("#")]),v._v(" Anvil")]),v._v(" "),_("ul",[_("li",[v._v("用于本地测试，账号管理")]),v._v(" "),_("li",[_("code",[v._v("anvil")]),v._v(" 启动本地测试网络")]),v._v(" "),_("li",[v._v("默认配置：\n"),_("ul",[_("li",[v._v("端口：8545")]),v._v(" "),_("li",[v._v("预设 10 个测试账户，每个账户 10000 ETH")])])]),v._v(" "),_("li",[v._v("常用参数：\n"),_("ul",[_("li",[_("code",[v._v("--port")]),v._v(" 指定端口")]),v._v(" "),_("li",[_("code",[v._v("--block-time")]),v._v(" 设置出块时间")]),v._v(" "),_("li",[_("code",[v._v("--fork-url")]),v._v(" 指定分叉网络")])])])]),v._v(" "),_("h2",{attrs:{id:"chisel"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#chisel"}},[v._v("#")]),v._v(" Chisel")]),v._v(" "),_("ul",[_("li",[v._v("用于快速测试本地或分叉网络上 Solidity 片段的行为，新版功能")]),v._v(" "),_("li",[_("code",[v._v("chisel")]),v._v(" 启动 Solidity REPL 环境")]),v._v(" "),_("li",[v._v("支持直接编写和测试 Solidity 代码")]),v._v(" "),_("li",[v._v("可以导入本地合约")]),v._v(" "),_("li",[v._v("可以与分叉网络交互")])])])}),[],!1,null,null,null);_.default=l.exports}}]);