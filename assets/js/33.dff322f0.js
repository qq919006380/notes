(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{356:function(t,a,r){"use strict";r.r(a);var e=r(4),s=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"javascript-标准对基于对象的定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript-标准对基于对象的定义"}},[t._v("#")]),t._v(" JavaScript 标准对基于对象的定义")]),t._v(" "),a("p",[t._v("语言和宿主的基础设施由对象来提供，并且 JavaScript 程序即是一系列互相通讯的对象集合。")]),t._v(" "),a("h2",{attrs:{id:"对象的特征"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象的特征"}},[t._v("#")]),t._v(" 对象的特征")]),t._v(" "),a("ul",[a("li",[t._v("对象具有唯一标识性：即使完全相同的两个对象，也并非同一个对象。")]),t._v(" "),a("li",[t._v("对象有状态：对象具有状态，同一对象可能处于不同状态之下。")]),t._v(" "),a("li",[t._v("对象具有行为：即对象的状态，可能因为它的行为产生变迁。")])]),t._v(" "),a("p",[t._v("为了提高抽象能力，JavaScript 的属性被设计成比别的语言更加复杂的形式，它提供了数据属性和访问器属性（getter/setter）两类。")]),t._v(" "),a("h2",{attrs:{id:"javascript-对象的两类属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript-对象的两类属性"}},[t._v("#")]),t._v(" JavaScript 对象的两类属性")]),t._v(" "),a("h3",{attrs:{id:"数据属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据属性"}},[t._v("#")]),t._v(" 数据属性")]),t._v(" "),a("p",[t._v("我们通常用于定义属性的代码会产生数据属性，其中的 writable、enumerable、configurable 都默认为 true。我们可以使用内置函数 getOwnPropertyDescriptor 来查看,如果我们要想改变属性的特征，或者定义访问器属性，我们可以使用 Object.defineProperty。")]),t._v(" "),a("ul",[a("li",[t._v("value：就是属性的值。")]),t._v(" "),a("li",[t._v("writable：决定属性能否被赋值。")]),t._v(" "),a("li",[t._v("enumerable：决定 for in 能否枚举该属性。")]),t._v(" "),a("li",[t._v("configurable：决定该属性能否被删除或者改变特征值。")])]),t._v(" "),a("h3",{attrs:{id:"访问器属性-getter-setter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#访问器属性-getter-setter"}},[t._v("#")]),t._v(" 访问器属性（getter/setter）")]),t._v(" "),a("p",[t._v("访问器属性使得属性在读和写时执行代码，它允许使用者在写和读属性时，得到完全不同的值，它可以视为一种函数的语法糖。")]),t._v(" "),a("ul",[a("li",[t._v("getter：函数或 undefined，在取属性值时被调用。")]),t._v(" "),a("li",[t._v("setter：函数或 undefined，在设置属性值时被调用。")]),t._v(" "),a("li",[t._v("enumerable：决定 for in 能否枚举该属性。")]),t._v(" "),a("li",[t._v("configurable：决定该属性能否被删除或者改变特征值。")])]),t._v(" "),a("h2",{attrs:{id:"javascript-中的对象分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript-中的对象分类"}},[t._v("#")]),t._v(" JavaScript 中的对象分类")]),t._v(" "),a("h3",{attrs:{id:"宿主对象-host-objects"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#宿主对象-host-objects"}},[t._v("#")]),t._v(" 宿主对象（host Objects）")]),t._v(" "),a("h2",{attrs:{id:"由-javascript-宿主环境提供的对象-它们的行为完全由宿主环境决定-如-浏览器中window或node中global"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#由-javascript-宿主环境提供的对象-它们的行为完全由宿主环境决定-如-浏览器中window或node中global"}},[t._v("#")]),t._v(" 由 JavaScript 宿主环境提供的对象，它们的行为完全由宿主环境决定,如：浏览器中window或node中global")]),t._v(" "),a("h3",{attrs:{id:"内置对象-built-in-objects-由-javascript-语言提供的对象。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内置对象-built-in-objects-由-javascript-语言提供的对象。"}},[t._v("#")]),t._v(" 内置对象（Built-in Objects）：由 JavaScript 语言提供的对象。")]),t._v(" "),a("p",[t._v("1、 固有对象（Intrinsic Objects ）：由标准规定，随着 JavaScript 运行时创建而自动创建的对象实例。\n2、 原生对象（Native Objects）：可以由用户通过 Array、RegExp 等内置构造器或者特殊语法创建的对象。\n3、 普通对象（Ordinary Objects）：由{}语法、Object 构造器或者 class 关键字定义类创建的对象，它能够被原型继承。")])])}),[],!1,null,null,null);a.default=s.exports}}]);